{
  "info": {
    "name": "FieldLink v5 API",
    "description": "Complete API collection for FieldLink v5 - AI Conversation Analysis Platform\n\n## Features\n- Audio Recording Upload\n- Speech-to-Text Transcription\n- AI Conversation Analysis\n- Sales Opportunity Detection\n- Sentiment Analysis\n- Process Adherence Scoring\n\n## Getting Started\n1. Set up environment variables:\n   - `baseUrl`: http://localhost:5000\n   - `token`: (will be set automatically after login)\n2. Run the \"Register\" or \"Login\" request in the Authentication folder\n3. The token will be automatically saved for subsequent requests\n\n## Documentation\nFor full API documentation, visit: http://localhost:5000/api/docs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "5.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "recordingId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('token', jsonData.data.token);",
                  "    pm.collectionVariables.set('userId', jsonData.data.user.id);",
                  "    pm.environment.set('token', jsonData.data.token);",
                  "    pm.environment.set('userId', jsonData.data.user.id);",
                  "    console.log('Token saved:', jsonData.data.token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"name\": \"John Doe\",\n  \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Register a new user account. The JWT token will be automatically saved for subsequent requests."
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('token', jsonData.data.token);",
                  "    pm.collectionVariables.set('userId', jsonData.data.user.id);",
                  "    pm.environment.set('token', jsonData.data.token);",
                  "    pm.environment.set('userId', jsonData.data.user.id);",
                  "    console.log('Logged in as:', jsonData.data.user.name);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login with email and password to receive a JWT token."
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "me"]
            },
            "description": "Get the currently authenticated user's profile."
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "logout"]
            },
            "description": "Logout the current user and invalidate the token."
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('token', jsonData.data.token);",
                  "    pm.environment.set('token', jsonData.data.token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "refresh"]
            },
            "description": "Refresh the authentication token."
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"OldPassword123!\",\n  \"newPassword\": \"NewPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "change-password"]
            },
            "description": "Change the current user's password."
          },
          "response": []
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "forgot-password"]
            },
            "description": "Request a password reset email."
          },
          "response": []
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset-token-here\",\n  \"newPassword\": \"NewSecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "reset-password"]
            },
            "description": "Reset password using the token from email."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "description": "User management endpoints",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (max 100)"
                },
                {
                  "key": "search",
                  "value": "",
                  "description": "Search by name or email",
                  "disabled": true
                },
                {
                  "key": "role",
                  "value": "",
                  "description": "Filter by role (USER, MANAGER, ADMIN)",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a paginated list of all users."
          },
          "response": []
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"name\": \"New User\",\n  \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users"]
            },
            "description": "Create a new user (Admin or Manager only)."
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Use the stored userId or replace with a specific ID",
                  "if (!pm.collectionVariables.get('userId')) {",
                  "    console.warn('userId not set. Please run Login first.');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{userId}}"]
            },
            "description": "Get detailed information about a specific user."
          },
          "response": []
        },
        {
          "name": "Get User Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{userId}}/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{userId}}", "stats"]
            },
            "description": "Get statistics for a specific user."
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Name\",\n  \"email\": \"updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{userId}}"]
            },
            "description": "Update user information."
          },
          "response": []
        },
        {
          "name": "Update User Role",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"MANAGER\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{userId}}/role",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{userId}}", "role"]
            },
            "description": "Update user role (Admin only)."
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{userId}}"]
            },
            "description": "Delete a user (Admin only)."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Recordings",
      "description": "Audio recording management endpoints",
      "item": [
        {
          "name": "Get All Recordings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/recordings?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "recordings"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (max 100)"
                },
                {
                  "key": "status",
                  "value": "",
                  "description": "Filter by status (PENDING, PROCESSING, COMPLETED, FAILED)",
                  "disabled": true
                },
                {
                  "key": "userId",
                  "value": "",
                  "description": "Filter by user ID",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve a paginated list of all recordings."
          },
          "response": []
        },
        {
          "name": "Upload Recording",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": [],
                  "description": "Audio file to upload"
                },
                {
                  "key": "title",
                  "value": "Sales Call Recording",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "Follow-up call with ABC Corp",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/recordings/upload",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "recordings", "upload"]
            },
            "description": "Upload an audio recording file."
          },
          "response": []
        },
        {
          "name": "Get Recording Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/recordings/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "recordings", "stats"]
            },
            "description": "Get recording statistics."
          },
          "response": []
        },
        {
          "name": "Get Recordings by Date Range",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/recordings/date-range?startDate=2025-01-01&endDate=2025-12-31&page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "recordings", "date-range"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2025-01-01",
                  "description": "Start date (ISO 8601)"
                },
                {
                  "key": "endDate",
                  "value": "2025-12-31",
                  "description": "End date (ISO 8601)"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get recordings within a specific date range."
          },
          "response": []
        },
        {
          "name": "Create Recording",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('recordingId', jsonData.data.id);",
                  "    pm.environment.set('recordingId', jsonData.data.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Sales Call - XYZ Company\",\n  \"description\": \"Initial discovery call\",\n  \"audioUrl\": \"https://storage.example.com/uploads/recording.mp3\",\n  \"duration\": 1200,\n  \"metadata\": {\n    \"fileSize\": 1500000,\n    \"format\": \"audio/mpeg\",\n    \"sampleRate\": 44100\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/recordings",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "recordings"]
            },
            "description": "Create a new recording entry."
          },
          "response": []
        },
        {
          "name": "Get Recording by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/recordings/{{recordingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "recordings", "{{recordingId}}"]
            },
            "description": "Get detailed information about a specific recording."
          },
          "response": []
        },
        {
          "name": "Update Recording",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Recording Title\",\n  \"description\": \"Updated description\",\n  \"status\": \"COMPLETED\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/recordings/{{recordingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "recordings", "{{recordingId}}"]
            },
            "description": "Update recording information."
          },
          "response": []
        },
        {
          "name": "Delete Recording",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/recordings/{{recordingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "recordings", "{{recordingId}}"]
            },
            "description": "Delete a recording and its associated data."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Analytics",
      "description": "Analytics and reporting endpoints",
      "item": [
        {
          "name": "Get Analytics Overview",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/analytics/overview",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "analytics", "overview"]
            },
            "description": "Get overview of analytics data."
          },
          "response": []
        },
        {
          "name": "Get Recording Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/analytics/recordings/{{recordingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "analytics", "recordings", "{{recordingId}}"]
            },
            "description": "Get analytics for a specific recording."
          },
          "response": []
        }
      ]
    },
    {
      "name": "System",
      "description": "System health and information endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check API server health status."
          },
          "response": []
        },
        {
          "name": "API Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Check API health with detailed service status."
          },
          "response": []
        },
        {
          "name": "API Information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api",
              "host": ["{{baseUrl}}"],
              "path": ["api"]
            },
            "description": "Get information about the API and its features."
          },
          "response": []
        },
        {
          "name": "List All Routes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/routes",
              "host": ["{{baseUrl}}"],
              "path": ["api", "routes"]
            },
            "description": "Get a complete list of all available API routes."
          },
          "response": []
        },
        {
          "name": "API Documentation",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/html",
                "description": "Use 'application/json' for raw markdown"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/docs",
              "host": ["{{baseUrl}}"],
              "path": ["api", "docs"]
            },
            "description": "View API documentation (HTML or JSON format)."
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Request:', pm.request.method, pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "console.log('Response:', pm.response.code, pm.response.status);",
          "",
          "// Log errors for debugging",
          "if (pm.response.code >= 400) {",
          "    console.error('Error Response:', pm.response.json());",
          "}"
        ]
      }
    }
  ]
}
