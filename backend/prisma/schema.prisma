// FieldLink v5 - AI Conversation Analysis Platform
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  industry  String?
  settings  Json?    @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users            User[]
  recordings       Recording[]
  processTemplates ProcessTemplate[]
  invitations      Invitation[]

  @@map("organizations")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  role           UserRole @default(USER)
  organizationId String
  avatar         String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  recordings   Recording[]

  @@map("users")
}

model Recording {
  id             String          @id @default(uuid())
  title          String
  userId         String
  organizationId String
  s3Key          String
  s3Url          String
  duration       Int // seconds
  fileSize       BigInt
  status         RecordingStatus @default(UPLOADED)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transcription  Transcription?
  analysisResult AnalysisResult?

  @@index([userId])
  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@map("recordings")
}

model Transcription {
  id              String   @id @default(uuid())
  recordingId     String   @unique
  text            String   @db.Text
  confidence      Float
  language        String   @default("en")
  speakerSegments Json // Array of speaker segments
  createdAt       DateTime @default(now())

  recording Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@map("transcriptions")
}

model AnalysisResult {
  id                 String   @id @default(uuid())
  recordingId        String   @unique
  processScore       Json // Process adherence scoring
  salesOpportunities Json // Sales opportunities detected
  sentiment          Json // Sentiment analysis
  actionItems        Json // Generated action items
  confidence         Float
  createdAt          DateTime @default(now())

  recording Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@map("analysis_results")
}

model ProcessTemplate {
  id             String   @id @default(uuid())
  organizationId String
  name           String
  description    String?  @db.Text
  steps          Json // Template steps with keywords
  isActive       Boolean  @default(true)
  isDefault      Boolean  @default(false)
  usageCount     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@map("process_templates")
}

model Invitation {
  id             String    @id @default(uuid())
  email          String
  role           UserRole  @default(USER)
  token          String    @unique
  organizationId String
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime  @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([organizationId])
  @@map("invitations")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum RecordingStatus {
  UPLOADED
  TRANSCRIBING
  ANALYZING
  COMPLETED
  FAILED
}
